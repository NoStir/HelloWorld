-- Function to check and print if the local player is in a specific condition
function CheckCondition(cond, name)
    local player = entities.GetLocalPlayer()
    if player and player:InCond(cond) then
        print("The local player is currently " .. name)
    end
end

local conditionsToCheck = {
    {E_TFCOND.TFCond_Slowed, "slowed"},
    {E_TFCOND.TFCond_Zoomed, "zoomed"},
    {E_TFCOND.TFCond_Disguising, "disguising"},
    {E_TFCOND.TFCond_Disguised, "disguised"},
    {E_TFCOND.TFCond_Cloaked, "cloaked"},
    {E_TFCOND.TFCond_Ubercharged, "ubercharged"},
    {E_TFCOND.TFCond_TeleportedGlow, "teleportedGlow"},
    {E_TFCOND.TFCond_Taunting, "taunting"},
    {E_TFCOND.TFCond_UberchargeFading, "uberchargeFading"},
    {E_TFCOND.TFCond_CloakFlicker, "cloakFlicker"},
    {E_TFCOND.TFCond_Teleporting, "teleporting"},
    {E_TFCOND.TFCond_Kritzkrieged, "kritzkrieged"},
    {E_TFCOND.TFCond_DeadRingered, "deadRingered"},
    {E_TFCOND.TFCond_Bonked, "bonked"},
    {E_TFCOND.TFCond_Dazed, "dazed"},
    {E_TFCOND.TFCond_Buffed, "buffed"},
    {E_TFCOND.TFCond_Charging, "charging"},
    {E_TFCOND.TFCond_DemoBuff, "demoBuff"},
    {E_TFCOND.TFCond_CritCola, "critCola"},
    {E_TFCOND.TFCond_InHealRadius, "inHealRadius"},
    {E_TFCOND.TFCond_Healing, "healing"},
    {E_TFCOND.TFCond_OnFire, "onFire"},
    {E_TFCOND.TFCond_Overhealed, "overhealed"},
    {E_TFCOND.TFCond_Jarated, "jarated"},
    {E_TFCOND.TFCond_Bleeding, "bleeding"},
    {E_TFCOND.TFCond_DefenseBuffed, "defenseBuffed"},
    {E_TFCOND.TFCond_Milked, "milked"},
    {E_TFCOND.TFCond_MegaHeal, "megaHeal"},
    {E_TFCOND.TFCond_RegenBuffed, "regenBuffed"},
    {E_TFCOND.TFCond_MarkedForDeath, "markedForDeath"},
    {E_TFCOND.TFCond_NoHealingDamageBuff, "noHealingDamageBuff"},
    {E_TFCOND.TFCond_SpeedBuffAlly, "speedBuffAlly"},
    {E_TFCOND.TFCond_HalloweenCritCandy, "halloweenCritCandy"},
    {E_TFCOND.TFCond_CritCanteen, "critCanteen"},
    {E_TFCOND.TFCond_CritDemoCharge, "critDemoCharge"},
    {E_TFCOND.TFCond_CritHype, "critHype"},
    {E_TFCOND.TFCond_CritOnFirstBlood, "critOnFirstBlood"},
    {E_TFCOND.TFCond_CritOnWin, "critOnWin"},
    {E_TFCOND.TFCond_CritOnFlagCapture, "critOnFlagCapture"},
    {E_TFCOND.TFCond_CritOnKill, "critOnKill"},
    {E_TFCOND.TFCond_RestrictToMelee, "restrictToMelee"},
    {E_TFCOND.TFCond_DefenseBuffNoCritBlock, "defenseBuffNoCritBlock"},
    {E_TFCOND.TFCond_Reprogrammed, "reprogrammed"},
    {E_TFCOND.TFCond_CritMmmph, "critMmmph"},
    {E_TFCOND.TFCond_DefenseBuffMmmph, "defenseBuffMmmph"},
    {E_TFCOND.TFCond_FocusBuff, "focusBuff"},
    {E_TFCOND.TFCond_DisguiseRemoved, "disguiseRemoved"},
    {E_TFCOND.TFCond_MarkedForDeathSilent, "markedForDeathSilent"},
    {E_TFCOND.TFCond_DisguisedAsDispenser, "disguisedAsDispenser"},
    {E_TFCOND.TFCond_Sapped, "sapped"},
    {E_TFCOND.TFCond_UberchargedHidden, "uberchargedHidden"},
    {E_TFCOND.TFCond_UberchargedCanteen, "uberchargedCanteen"},
    {E_TFCOND.TFCond_HalloweenBombHead, "halloweenBombHead"},
    {E_TFCOND.TFCond_HalloweenThriller, "halloweenThriller"},
    {E_TFCOND.TFCond_RadiusHealOnDamage, "radiusHealOnDamage"},
    {E_TFCOND.TFCond_CritOnDamage, "critOnDamage"},
    {E_TFCOND.TFCond_UberchargedOnTakeDamage, "uberchargedOnTakeDamage"},
    {E_TFCOND.TFCond_UberBulletResist, "uberBulletResist"},
    {E_TFCOND.TFCond_UberBlastResist, "uberBlastResist"},
    {E_TFCOND.TFCond_UberFireResist, "uberFireResist"},
    {E_TFCOND.TFCond_SmallBulletResist, "smallBulletResist"},
    {E_TFCOND.TFCond_SmallBlastResist, "smallBlastResist"},
    {E_TFCOND.TFCond_SmallFireResist, "smallFireResist"},
    {E_TFCOND.TFCond_Stealthed, "stealthed"},
    {E_TFCOND.TFCond_MedigunDebuff, "medigunDebuff"},
    {E_TFCOND.TFCond_StealthedUserBuffFade, "stealthedUserBuffFade"},
    {E_TFCOND.TFCond_BulletImmune, "bulletImmune"},
    {E_TFCOND.TFCond_BlastImmune, "blastImmune"},
    {E_TFCOND.TFCond_FireImmune, "fireImmune"},
    {E_TFCOND.TFCond_PreventDeath, "preventDeath"},
    {E_TFCOND.TFCond_MVMBotRadiowave, "mvmBotRadiowave"},
    {E_TFCOND.TFCond_HalloweenSpeedBoost, "halloweenSpeedBoost"},
    {E_TFCOND.TFCond_HalloweenQuickHeal, "halloweenQuickHeal"},
    {E_TFCOND.TFCond_HalloweenGiant, "halloweenGiant"},
    {E_TFCOND.TFCond_HalloweenTiny, "halloweenTiny"},
    {E_TFCOND.TFCond_HalloweenInHell, "halloweenInHell"},
    {E_TFCOND.TFCond_HalloweenGhostMode, "halloweenGhostMode"},
    {E_TFCOND.TFCond_MiniCritOnKill, "miniCritOnKill"},
    {E_TFCOND.TFCond_DodgeChance, "dodgeChance"},
    {E_TFCOND.TFCond_Parachute, "parachute"},
    {E_TFCOND.TFCond_BlastJumping, "blastJumping"},
    {E_TFCOND.TFCond_HalloweenKart, "halloweenKart"},
    {E_TFCOND.TFCond_HalloweenKartDash, "halloweenKartDash"},
    {E_TFCOND.TFCond_BalloonHead, "balloonHead"},
    {E_TFCOND.TFCond_MeleeOnly, "meleeOnly"},
    {E_TFCOND.TFCond_SwimmingCurse, "swimmingCurse"},
    {E_TFCOND.TFCond_HalloweenKartNoTurn, "halloweenKartNoTurn"},
    {E_TFCOND.TFCond_HalloweenKartCage, "halloweenKartCage"},
    {E_TFCOND.TFCond_HasRune, "hasRune"},
    {E_TFCOND.TFCond_RuneStrength, "runeStrength"},
    {E_TFCOND.TFCond_RuneHaste, "runeHaste"},
    {E_TFCOND.TFCond_RuneRegen, "runeRegen"},
    {E_TFCOND.TFCond_RuneResist, "runeResist"},
    {E_TFCOND.TFCond_RuneVampire, "runeVampire"},
    {E_TFCOND.TFCond_RuneWarlock, "runeWarlock"},
    {E_TFCOND.TFCond_RunePrecision, "runePrecision"},
    {E_TFCOND.TFCond_RuneAgility, "runeAgility"},
    {E_TFCOND.TFCond_GrapplingHook, "grapplingHook"},
    {E_TFCOND.TFCond_GrapplingHookSafeFall, "grapplingHookSafeFall"},
    {E_TFCOND.TFCond_GrapplingHookLatched, "grapplingHookLatched"},
    {E_TFCOND.TFCond_GrapplingHookBleeding, "grapplingHookBleeding"},
    {E_TFCOND.TFCond_AfterburnImmune, "afterburnImmune"},
    {E_TFCOND.TFCond_RuneKnockout, "runeKnockout"},
    {E_TFCOND.TFCond_RuneImbalance, "runeImbalance"},
    {E_TFCOND.TFCond_CritRuneTemp, "critRuneTemp"},
    {E_TFCOND.TFCond_PasstimeInterception, "passtimeInterception"},
    {E_TFCOND.TFCond_SwimmingNoEffects, "swimmingNoEffects"},
    {E_TFCOND.TFCond_EyeaductUnderworld, "eyeaductUnderworld"},
    {E_TFCOND.TFCond_KingRune, "kingRune"},
    {E_TFCOND.TFCond_PlagueRune, "plagueRune"},
    {E_TFCOND.TFCond_SupernovaRune, "supernovaRune"},
    {E_TFCOND.TFCond_Plague, "plague"},
    {E_TFCOND.TFCond_KingAura, "kingAura"},
    {E_TFCOND.TFCond_SpawnOutline, "spawnOutline"},
    {E_TFCOND.TFCond_KnockedIntoAir, "knockedIntoAir"},
    {E_TFCOND.TFCond_CompetitiveWinner, "competitiveWinner"},
    {E_TFCOND.TFCond_CompetitiveLoser, "competitiveLoser"},
    {E_TFCOND.TFCond_HealingDebuff, "healingDebuff"},
    {E_TFCOND.TFCond_PasstimePenaltyDebuff, "passtimePenaltyDebuff"},
    {E_TFCOND.TFCond_GrappledToPlayer, "grappledToPlayer"},
    {E_TFCOND.TFCond_GrappledByPlayer, "grappledByPlayer"},
    {E_TFCOND.TFCond_ParachuteDeployed, "parachuteDeployed"},
    {E_TFCOND.TFCond_Gas, "gas"},
    {E_TFCOND.TFCond_BurningPyro, "burningPyro"},
    {E_TFCOND.TFCond_RocketPack, "rocketPack"},
    {E_TFCOND.TFCond_LostFooting, "lostFooting"},
    {E_TFCOND.TFCond_AirCurrent, "airCurrent"},
}

-- Iterate over the conditions to check if the player is in them
for _, cond in ipairs(conditionsToCheck) do
    CheckCondition(cond[1], cond[2])
end